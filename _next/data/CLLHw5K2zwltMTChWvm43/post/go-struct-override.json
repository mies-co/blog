{"pageProps":{"content":"# Go Struct Override\n\nHow to (partially) override values of a struct, based on a new struct.\nThis snippet shows how to override only one of the colors of a default theme.\n\n[Run on the Go playground](https://play.golang.org/p/1fC6q25a6OH)\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype palette struct {\n\tBg         string\n\tFg         string\n\tContrastBg string\n\tContrastFg string\n}\n\ntype theme struct {\n\tpalette\n}\n\nfunc newTheme() *theme {\n\tt := &theme{}\n\tt.palette = palette{\n\t\tFg:         \"white\",\n\t\tBg:         \"white\",\n\t\tContrastBg: \"red\",\n\t\tContrastFg: \"white\",\n\t}\n\n\treturn t\n}\n\ntype paletteCustom struct {\n\tContrastBg string\n}\n\nvar paletteOverrides = paletteCustom{\n\tContrastBg: \"green\",\n}\n\nfunc main() {\n\tth := newTheme()\n\n\trefValue := reflect.ValueOf(paletteOverrides)\n\trefType := refValue.Type()\n\n\tfor i := 0; i < refValue.NumField(); i++ {\n\t\tfieldName := refType.Field(i).Name\n\t\tfieldValue := refValue.Field(i).Interface()\n\n\t\tvalue := reflect.ValueOf(th).Elem().FieldByName(fieldName)\n\t\tvalue.Set(reflect.ValueOf(fieldValue))\n\t}\n\n\t// Should output \"green\" if the override occured correctly\n\tfmt.Println(th.ContrastBg)\n}\n\n```","frontmatter":{"publish":true,"title":"Go Struct Override","description":"How to (partially) override values of a struct, based on a new struct.","language":"go","author":{"firstname":"Asten","lastname":"Mies","twitter":"astenmies"},"social":{"image":"https://blog.mies.co/static/media/modules.jpg"},"tags":["golang","struct","developers"],"dateCreated":"2020-12-16T00:00:00.000Z","dateUpdated":"2020-12-17T00:00:00.000Z","dateLast":"2020-12-17T00:00:00.000Z","dateCreatedHuman":"16 Dec 2020","dateUpdatedHuman":"17 Dec 2020","dateLastHuman":"17 Dec 2020"}},"__N_SSG":true}