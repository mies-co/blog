{"pageProps":{"content":"# Go modules\nCreated on: July 29, 2020. Updated on: August 8, 2020.\n\n## Init\n\n### Generate go.mod\n\nInitialize the modules, and name the module for compatibility with older tools that do not support go modules.\n\n```sh\ncd repo\ngo mod init github.com/username/repo\n```\n\n### Generate go.sum\n\nAdd dependencies to our project.\n\n```sh\ngo get github.com/julienschmidt/httprouter\ngo get go.uber.org/zap\n```\n\nNow, go.sum was generated automatically.\n\n### Explore go.mod\n\nNow our go.mod looks like this.\n\n- `module` the name of our module\n- `require` the list of dependencies\n- `// indirect` indicates we're not using these dependencies in our project\n\n```go\nmodule github.com/mies-co/go-modules\n\ngo 1.14\n\nrequire (\n\tgithub.com/julienschmidt/httprouter v1.3.0\n\tgo.uber.org/zap v1.15.0\n)\n\n```\nOn the other hand, go.sum now contains lots of dependencies. Dependencies needed by our dependencies.\n\n## Use the modules\n\nCreate main.go\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/julienschmidt/httprouter\"\n\t\"go.uber.org/zap\"\n)\n\nfunc main() {\n\trouter := httprouter.New()\n\trouter.GET(\"/\", Index)\n\tlog.Fatal(http.ListenAndServe(\":8080\", router))\n}\n\n// Index logs some messages\nfunc Index(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {\n\tlogger, _ := zap.NewProduction()\n\tlogger.Info(\"successfully performed http request\")\n}\n```\n\nNow send a request to localhost:8080.\n\n```sh\ncurl localhost:8080\n```\nYou will now see a log\n\n> {\n  \"level\": \"info\",\n  \"ts\": 1596877975.6699991,\n  \"caller\": \"go-modules/main.go:20\",\n  \"msg\": \"successfully performed http request\"\n}\n\n## Tidy\n\nThe `tidy` command affects go.mod, by:\n\n- Removing unused dependencies\n- Adding missing dependencies\n- Removing comments\n\n```sh\ngo mod tidy\n```\n\n## Get\n\nIf you have a go.mod file in your project, `go get` will automatically add the dependency to your go.mod.\n\nYou can get a module in different ways:\n\n**Get:** \n\nFollows semantic import versioning. This will get the latest stable.\n\n```sh\ngo get github.com/username/repo\n```\n\n**Get a specific go module by version:** \n\n```sh\ngo get github.com/username/repo@v1.2\n```\n\n**Get a specific go module by git commit hash:**\n\nEnables to get a \"pseudo-version\" by specifing the hash of a git commit.\n\n```sh\ngo get github.com/username/repo@86f663142f6de70c798bae40660f7d8726e27abc\n```\n\n## Semantic import versioning in Go\n\nMore information about [Go semantic versioning](https://golang.org/ref/mod#versions).\n\n**v0 - Unstable:**\n\n```sh\ngo get github.com/username/repo@v0.0.1\n```\n\n**v1 - Stable minor:**\n\nYou may specify `@v1.0.0` if necessary, or get the latest like this:\n\n```sh\ngo get github.com/username/repo\n```\n\n**v2+ - Stable major:**\n\nAll versions above 1 are considered major versions and need to be downloaded differently.\n\n```sh\ngo get github.com/username/repo/v2\n```\n\nInside your go code, you will have to use that path as well.\n\n```go\npackage main\n\nimport (\n    repoV2 \"github.com/username/repo/v2\"\n)\n```\n\n## Get all dependencies that are not yet on your machine\n\nAfter a fresh `git clone`, you usually don't have all the necessary dependencies of a project. Any of the following commands will get them all for you:\n\n```sh\ngo get ./...\n# or\ngo build\n# or\ngo build\n# or\ngo test\n```\n\nIt works wether you use go modules or not.\n\n## Clean the download cache\n\nTo remove all packages from our local machine:\n\n```sh\ngo clean -cache -modcache -i -r\n```\n\nMore information about the [Go clean command and flags](https://godoc.org/cmd/go#hdr-Remove_object_files_and_cached_files)\n\n## List all versions of a module\n\n```sh\ngo list -m -versions github.com/username/repo\n```\n\nYou cannot run this if you already have a vendor directory. So just delete the vendor directory `rm -rf vendor`.\n\n## Get all dependencies defined in go.mod\n\nThe following command will get all the dependencies listed in your go.mod file, without consulting the source code to identify used/unused dependencies.\n\n```sh\ngo mod download\n```\n\n## Downloads directory\n\nBy default, all downloaded modules will be here:\n\n```sh\nls $GOPATH/pkg/mod\n```\n\nIt's the same structure as the src directory, and there's also a cache directory.\n\n## Vendor directory\n\nIn order to generate a vendor directory of all the dependencies compatible with all the versions of Go with/without support of go modules, just run:\n\n```sh\ngo mod vendor\n```\n\nNow we have a vendor directory.\n\n## Proxy\n\nWhat is a Go proxy?\n\n```sh\ngo env | grep \"GOPROXY\"\n# outputs: GOPROXY=\"https://proxy.golang.org,direct\"\n```\n\nThat proxy will first be used to get a module, if it does not find it there, it will use the network and use direct. Let's say github is down, the GOPROXY is able to still serve the package.\n\nAn additional feature is GOSUMDB, which will verify the checksum to ensure that we downloaded what we intended to, and not a malicious package.\n\n```sh\ngo env | grep \"GOSUMDB\"\n# outputs: GOSUMDB=\"sum.golang.org\"\n```\n\n## Migrate Dep to Mod\n\nTo migrate an existing project that uses the the go dep package manager, to go mod:\n\n```sh\ngo mod init github.com/username/repo\n```\n\nIt copies from Gopkg.toml and Gopkg.lock to go.mod.\nDone, now you can delete your Gopkg files.\n\nHowever, there might be are some unnecessary dependencies in go.mod. To clean them up, let's run\n\n```sh\ngo mod tidy\n```\n\n## Sources\n\nThis article is a written shorter version of a tutorial made by Steve Hook - [EVERYTHING You SHOULD know about Go Modules](https://youtu.be/Z1VhG7cf83M).","frontmatter":{"title":"Go modules","description":"Full recap on Go modules.","language":"go","dateCreated":"July 29, 2020","dateUpdated":"August 8, 2020","dateLast":"August 8, 2020"}},"__N_SSG":true}